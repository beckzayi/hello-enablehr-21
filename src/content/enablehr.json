{
    "openapi": "3.0.2",
    "info": {
        "contact": {
            "email": "support@enablehr.com",
            "name": "enableHR Support Team",
            "url": "https://support.enablehr.com"
        },
        "description": "enableHR & HRA Cloud API endpoint.",
        "title": "enableHR & HRA Cloud API",
        "version": "1.0.0"
    },
    "servers": [
        {
            "description": "enablehr & HRA Cloud API servers",
            "url": "https://rest.{application}.com/",
            "variables": {
                "application": {
                    "default": "enablehr",
                    "description": "The application the API is integrating with",
                    "enum": [
                        "enablehr",
                        "hrassured"
                    ]
                }
            }
        }
    ],
    "tags": [
        {
            "description": "Operations relating to branches (business units or locations) with in account",
            "name": "Branches"
        },
        {
            "description": "Operations relating to candidates within an account.",
            "name": "Candidates"
        },
        {
            "description": "Operations relating to employees within an account.",
            "name": "Employees"
        },
        {
            "description": "Operations for checking the API services health.",
            "name": "Health Checks"
        },
        {
            "description": "Operations relating to reference (rarely changing) data within the system or an account.",
            "name": "Reference Data"
        },
        {
            "description": "Operations relating to users within an account.",
            "name": "Users"
        }
    ],
    "paths": {
        "/ping": {
            "get": {
                "description": "Checks the health of the client facing API server, including connectivity to any underlying API servers, databases or file servers.",
                "operationId": "Ping",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": "UP - 12345",
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Server is healthy and all necessary services are available."
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "summary": "Pings the server",
                "tags": [
                    "Health Checks"
                ]
            }
        },
        "/users/self": {
            "get": {
                "description": "This endpoint provides details of the current user (currently only username).\n\n**NOTE:** This API is subject to change, specifically it will change from a String to an object representing the full details of the user in a future release.\n",
                "operationId": "RetrieveCurrentUser",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CurrentUser"
                                }
                            }
                        },
                        "description": "Returns details of the authenticated user."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "summary": "Retrieves the current user",
                "tags": [
                    "Users"
                ]
            }
        },
        "/accounts/self": {
            "get": {
                "description": "Returns information about the user authenticated with by the current JWT.\n\n**Note:** This API is subject to change, in future releases it will return a JSON object with richer account details.\n",
                "operationId": "RetrieveCurrentAccount",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The currently authenticated user's account ID",
                                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Account information"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "summary": "Retrieves the current account",
                "tags": [
                    "Accounts"
                ]
            }
        },
        "/accounts/{accountId}/action-status/{actionStatusId}": {
            "get": {
                "description": "Returns a status of an action in an account accessible to the authenticated user.",
                "operationId": "ActionStatuses",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionStatusDetail"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "read:accounts:referencedata"
                        ]
                    }
                ],
                "summary": "Retrieve Action Status",
                "tags": [
                    "Accounts"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an action status.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "actionStatusId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/accounts/{accountId}/branches": {
            "get": {
                "description": "Returns an (optionally) filtered list of all branches in an account accessible to the authenticated user.",
                "operationId": "ListBranches",
                "parameters": [
                    {
                        "description": "A search string that contains `field:values` together with boolean operators, which can be used to filter the result.\n\n An asterix (`*`) can also be used as a wildcard for partial matches on words.\n Logical operators (`AND` and `OR`) can be used between terms.\n Terms can be grouped via parenthesis to build complex search queries (see examples below).\n\n The fields used in the field must be fields returned from the REST API endpoint.\n\n Some example filters:\n * `firstName:John` which would return employees whose firstName was John.\n * `surname:Smith OR surname:Klein` which would return employees whose surname was either Smith or Klein.\n * `surname:Smi*` which would return employees whose surname is Smith, Smits, Smithe, etc.\n * `type:LegalEntity AND postcode:2000` which would return all branches that are Legal Entities and in postcode 2000.\n * `postcode:2000 OR postcode:3000` which would return all branches in either postcode of 2000 or in postcode 3000.\n * `type:LegalEntity AND (postcode:2000 OR postcode:3000)` which would return all branches that are Legal Entities and in postcode 2000 or 3000.\n",
                        "example": "name:Scottie*",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "WIP Description\n\nSpecify the field, followed by asc/desc, separated by :\n",
                        "example": "sort=name:asc&sort=type:desc",
                        "explode": true,
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "WIP Description\n\nPagination: Indicates the number of items that would be in the results.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": 100,
                        "in": "query",
                        "name": "first",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: Start Cursor for the requested Page.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": "342dfs09ds329320",
                        "in": "query",
                        "name": "after",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: Indicates the number of items that would be in the results\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": 100,
                        "in": "query",
                        "name": "last",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: End Cursor for the requested Page.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": "531dfs09ds332932",
                        "in": "query",
                        "name": "before",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchesPage"
                                }
                            }
                        },
                        "description": "The request was successful, the response contains an an array of branches (in summary form) in the account, wrapped in pagination information."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "read:accounts:referencedata"
                        ]
                    }
                ],
                "summary": "Lists branches",
                "tags": [
                    "Branches"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/accounts/{accountId}/branches/{branchId}": {
            "get": {
                "description": "Retrieves a specific branch given the `accountId` and `branchId`.",
                "operationId": "RetrieveBranch",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchDetail"
                                }
                            }
                        },
                        "description": "The request was successful, the response contains the full detail of an individual branch."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "read:accounts:referencedata"
                        ]
                    }
                ],
                "summary": "Retrieves a branch",
                "tags": [
                    "Branches"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of a branch within an account.",
                    "example": "d5117655c5814a0fb8ee2e9ed9d6d384",
                    "in": "path",
                    "name": "branchId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/accounts/{accountId}/candidates": {
            "get": {
                "description": "Returns an (optionally) filtered list of all candidates in an account accessible to the authenticated user.",
                "operationId": "ListCandidates",
                "parameters": [
                    {
                        "description": "A search string that contains `field:values` together with boolean operators, which can be used to filter the result.\n\n An asterix (`*`) can also be used as a wildcard for partial matches on words.\n Logical operators (`AND` and `OR`) can be used between terms.\n Terms can be grouped via parenthesis to build complex search queries (see examples below).\n\n The fields used in the field must be fields returned from the REST API endpoint.\n\n Some example filters:\n * `firstName:John` which would return employees whose firstName was John.\n * `surname:Smith OR surname:Klein` which would return employees whose surname was either Smith or Klein.\n * `surname:Smi*` which would return employees whose surname is Smith, Smits, Smithe, etc.\n * `type:LegalEntity AND postcode:2000` which would return all branches that are Legal Entities and in postcode 2000.\n * `postcode:2000 OR postcode:3000` which would return all branches in either postcode of 2000 or in postcode 3000.\n * `type:LegalEntity AND (postcode:2000 OR postcode:3000)` which would return all branches that are Legal Entities and in postcode 2000 or 3000.\n",
                        "example": "name:Scottie*",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "WIP Description\n\nSpecify the field, followed by asc/desc, separated by :\n",
                        "example": "sort=name:asc&sort=type:desc",
                        "explode": true,
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "WIP Description\n\nPagination: Indicates the number of items that would be in the results.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": 100,
                        "in": "query",
                        "name": "first",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: Start Cursor for the requested Page.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": "342dfs09ds329320",
                        "in": "query",
                        "name": "after",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: Indicates the number of items that would be in the results\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": 100,
                        "in": "query",
                        "name": "last",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: End Cursor for the requested Page.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": "531dfs09ds332932",
                        "in": "query",
                        "name": "before",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CandidatesPage"
                                }
                            }
                        },
                        "description": "The request was successful, the response contains an array of candidates (in summary form) in the account, wrapped in pagination information."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "read:candidates"
                        ]
                    }
                ],
                "summary": "Lists candidates",
                "tags": [
                    "Candidates"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates a new candidate.\n\nThe following fields are mandatory for this request:\n    * First Name (`firstName`)\n    * Surname (`surname`)\n    * Branch ID (`branchId`)\n",
                "operationId": "CreateCandidate",
                "requestBody": {
                    "$ref": "#/components/requestBodies/CandidateRequest"
                },
                "responses": {
                    "201": {
                        "description": "Candidate created successfully",
                        "headers": {
                            "Location": {
                                "description": "The location header will provide the canonical reference to the created candidate",
                                "example": "https://rest.enablehr.com/accounts/4eb62cb48c9f429c93bc26664c1a5a4d/candidates/2dccadd0b8504cf98aeb0321e3bcf88e",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "manage:candidates"
                        ]
                    }
                ],
                "summary": "Creates a new candidate",
                "tags": [
                    "Candidates"
                ]
            }
        },
        "/accounts/{accountId}/candidates/{candidateId}": {
            "get": {
                "description": "Retrieves a specific candidate given the `accountId` and `candidateId`.",
                "operationId": "RetrieveCandidate",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CandidateDetail"
                                }
                            }
                        },
                        "description": "The request was successful, the response contains the full detail of an individual candidate."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "read:candidates"
                        ]
                    }
                ],
                "summary": "Retrieves an candidate",
                "tags": [
                    "Candidates"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an candidate within an account.",
                    "example": "b48c9f492c93bc26664c1a5a4d1273",
                    "in": "path",
                    "name": "candidateId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "Updates a particular candidate given the `accountId` and `candidateId`.\n\nThis is a complete update (the majority of fields in the body are required, or else they will be saved as null).\n* Changing branch IDs\nThese will be introduced as explicit actions (as they require more information than just the status change) in a future release.\n",
                "operationId": "UpdateCandidate",
                "requestBody": {
                    "$ref": "#/components/requestBodies/CandidateRequest"
                },
                "responses": {
                    "204": {
                        "description": "Candidate updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "manage:candidates"
                        ]
                    }
                ],
                "summary": "Updates a candidate",
                "tags": [
                    "Candidates"
                ]
            }
        },
        "/accounts/{accountId}/candidates/{candidateId}/actions/convert": {
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an candidate within an account.",
                    "example": "b48c9f492c93bc26664c1a5a4d1273",
                    "in": "path",
                    "name": "candidateId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Converts a candidate to an employee.\n",
                "operationId": "ConvertCandidateToEmployee",
                "requestBody": {
                    "$ref": "#/components/requestBodies/CandidateConversionRequest"
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionStatusResponse"
                                }
                            }
                        },
                        "description": "The status response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "manage:candidates"
                        ]
                    }
                ],
                "summary": "Convert a candidate to employee",
                "tags": [
                    "Candidates"
                ]
            }
        },
        "/accounts/{accountId}/candidates/{candidateId}/actions/merge": {
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an candidate within an account.",
                    "example": "b48c9f492c93bc26664c1a5a4d1273",
                    "in": "path",
                    "name": "candidateId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Merges two candidates\n\nThe following fields are mandatory for this request:\n    * Candidate Id (`candidateId`)\n",
                "operationId": "MergeCandidates",
                "requestBody": {
                    "$ref": "#/components/requestBodies/RecordMergeRequest"
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionStatusResponse"
                                }
                            }
                        },
                        "description": "The status response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "manage:candidates"
                        ]
                    }
                ],
                "summary": "Merges two candidates",
                "tags": [
                    "Candidates"
                ]
            }
        },
        "/accounts/{accountId}/employees": {
            "get": {
                "description": "Returns an (optionally) filtered list of all employees in an account accessible to the authenticated user.",
                "operationId": "ListEmployees",
                "parameters": [
                    {
                        "description": "A search string that contains `field:values` together with boolean operators, which can be used to filter the result.\n\n An asterix (`*`) can also be used as a wildcard for partial matches on words.\n Logical operators (`AND` and `OR`) can be used between terms.\n Terms can be grouped via parenthesis to build complex search queries (see examples below).\n\n The fields used in the field must be fields returned from the REST API endpoint.\n\n Some example filters:\n * `firstName:John` which would return employees whose firstName was John.\n * `surname:Smith OR surname:Klein` which would return employees whose surname was either Smith or Klein.\n * `surname:Smi*` which would return employees whose surname is Smith, Smits, Smithe, etc.\n * `type:LegalEntity AND postcode:2000` which would return all branches that are Legal Entities and in postcode 2000.\n * `postcode:2000 OR postcode:3000` which would return all branches in either postcode of 2000 or in postcode 3000.\n * `type:LegalEntity AND (postcode:2000 OR postcode:3000)` which would return all branches that are Legal Entities and in postcode 2000 or 3000.\n",
                        "example": "name:Scottie*",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "WIP Description\n\nSpecify the field, followed by asc/desc, separated by :\n",
                        "example": "sort=name:asc&sort=type:desc",
                        "explode": true,
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "WIP Description\n\nPagination: Indicates the number of items that would be in the results.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": 100,
                        "in": "query",
                        "name": "first",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: Start Cursor for the requested Page.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": "342dfs09ds329320",
                        "in": "query",
                        "name": "after",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: Indicates the number of items that would be in the results\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": 100,
                        "in": "query",
                        "name": "last",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: End Cursor for the requested Page.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": "531dfs09ds332932",
                        "in": "query",
                        "name": "before",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmployeesPage"
                                }
                            }
                        },
                        "description": "The request was successful, the response contains an array of employees (in summary form) in the account, wrapped in pagination information."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "read:employees"
                        ]
                    }
                ],
                "summary": "Lists employees",
                "tags": [
                    "Employees"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates a new employee.\n\nThe following fields are mandatory for this request:\n    * First Name (`firstName`)\n    * Surname (`surname`)\n    * Branch ID (`branchId`)\n",
                "operationId": "CreateEmployee",
                "requestBody": {
                    "$ref": "#/components/requestBodies/EmployeeRequest"
                },
                "responses": {
                    "201": {
                        "description": "Employee created successfully",
                        "headers": {
                            "Location": {
                                "description": "The location header will provide the canonical reference to the created employee",
                                "example": "https://rest.enablehr.com/accounts/4eb62cb48c9f429c93bc26664c1a5a4d/employees/2dccadd0b8504cf98aeb0321e3bcf88e",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "manage:employees"
                        ]
                    }
                ],
                "summary": "Creates a new employee",
                "tags": [
                    "Employees"
                ]
            }
        },
        "/accounts/{accountId}/employees/{employeeId}": {
            "get": {
                "description": "Retrieves a specific employee given the `accountId` and `employeeId`.",
                "operationId": "RetrieveEmployee",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmployeeDetail"
                                }
                            }
                        },
                        "description": "The request was successful, the response contains the full detail of an individual employee."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "read:employees"
                        ]
                    }
                ],
                "summary": "Retrieves an employee",
                "tags": [
                    "Employees"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an employee within an account.",
                    "example": "b48c9f429c93bc26664c1a5a4d1273",
                    "in": "path",
                    "name": "employeeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "Updates a particular employee given the `accountId` and `employeeId`.\n\nThis is a complete update (the majority of fields in the body are required, or else they will be saved as null).\n\n**Note:** Some changes are ignored in this process:\n  * Employment Status (eg Current -> Terminated)\n  * Changing branch IDs\n\nThese will be introduced as explicit actions (as they require more information than just the status change) in a future release.\n",
                "operationId": "UpdateEmployee",
                "requestBody": {
                    "$ref": "#/components/requestBodies/EmployeeRequest"
                },
                "responses": {
                    "204": {
                        "description": "Employee updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "manage:employees"
                        ]
                    }
                ],
                "summary": "Updates an employee",
                "tags": [
                    "Employees"
                ]
            }
        },
        "/accounts/{accountId}/employees/{employeeId}/actions/terminate": {
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an employee within an account.",
                    "example": "b48c9f429c93bc26664c1a5a4d1273",
                    "in": "path",
                    "name": "employeeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Terminates an employee.\n\nThe following fields are mandatory for this request:\n    * End Date (`endDate`)\n    * Termination Method (`terminationMethod`)\n",
                "operationId": "TerminateEmployee",
                "requestBody": {
                    "$ref": "#/components/requestBodies/EmployeeTerminationRequest"
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionStatusResponse"
                                }
                            }
                        },
                        "description": "The status response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "manage:employees"
                        ]
                    }
                ],
                "summary": "Terminates an employee",
                "tags": [
                    "Employees"
                ]
            }
        },
        "/accounts/{accountId}/employees/{employeeId}/actions/transfer": {
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an employee within an account.",
                    "example": "b48c9f429c93bc26664c1a5a4d1273",
                    "in": "path",
                    "name": "employeeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Transfers an employee.\n\nThe following fields are mandatory for this request:\n    * Transfer Type (`transferType`)\n    * To Branch ID  (`toBranchId`)\n",
                "operationId": "TransferEmployee",
                "requestBody": {
                    "$ref": "#/components/requestBodies/RecordTransferInputRequest"
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionStatusResponse"
                                }
                            }
                        },
                        "description": "The status response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "manage:employees"
                        ]
                    }
                ],
                "summary": "Transfers an employee",
                "tags": [
                    "Employees"
                ]
            }
        },
        "/accounts/{accountId}/employees/{employeeId}/bank-accounts": {
            "get": {
                "description": "Retrieves an employees bank details.  All bank details are retrieved as an array\nof bank details\n",
                "operationId": "RetrieveEmployeeBankAccounts",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecordBankAccounts"
                                }
                            }
                        },
                        "description": "The request was successful, the response contains the all bank details for an individual employee."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "read:employees:payroll"
                        ]
                    }
                ],
                "summary": "Retrieves an employees bank details",
                "tags": [
                    "Employees"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an employee within an account.",
                    "example": "b48c9f429c93bc26664c1a5a4d1273",
                    "in": "path",
                    "name": "employeeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "Updates the list of employees bank details\n\nThe following fields are mandatory for this request when using AU:\n    * BSB (`bsb`)\n    * Account Number (`number`)\n    * Account Name (`name`)\n    * Remainder (`remainder`)\n    * Account Order (`accountOrder`)\n\nThe following fields are mandatory for this request when using NZ:\n    * Account Number (`number`)\n    * Account Name (`name`)\n    * Remainder (`remainder`)\n",
                "operationId": "MaintainEmployeeBankAccounts",
                "requestBody": {
                    "$ref": "#/components/requestBodies/RecordBankAccountsRequest"
                },
                "responses": {
                    "204": {
                        "description": "Employee Bank Details updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "manage:employees:payroll"
                        ]
                    }
                ],
                "summary": "Creates/Updates/Deletes employees bank accounts",
                "tags": [
                    "Employees"
                ]
            }
        },
        "/accounts/{accountId}/employees/{employeeId}/leave-balances": {
            "get": {
                "description": "Retrieves an employees leave balances\n",
                "operationId": "RetrieveEmployeeLeaveBalances",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecordLeaveBalanceDetail"
                                }
                            }
                        },
                        "description": "The request was successful, the response contains the full detail of an employees leave balance"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "read:employees:payroll"
                        ]
                    }
                ],
                "summary": "Retrieves an employees leave balances",
                "tags": [
                    "Employees"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an employee within an account.",
                    "example": "b48c9f429c93bc26664c1a5a4d1273",
                    "in": "path",
                    "name": "employeeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "Creates/Updates the list of employees leave balances.  If the leave balances exist\nthey will be updated otherwise they will be created.\n\nThe following fields are mandatory for this request when using AU:\n    * Annual Leave (`annualLeave`)\n    * Personal Leave (`personalLeave`)\n    * Long Service Leave (`longServiceLeave`)\n\nThe following fields are mandatory for this request when using NZ:\n    * Annual Leave (`annualLeave`)\n    * Sick Leave (`sickLeave`)\n    * Parental Leave (`parentalLeave`)\n    * Alternative Holidays (`alternativeHolidays`)\n    * Long Service Leave (`longServiceLeave`)\n    * Bereavement Leave (`bereavementLeave`)\n    * Domestic Violence Leave (`domesticViolenceLeave`)\n\nThe leave balances are captured in hours. If the user is providing more than\n2 decimal places then we round-off the leave balance.\nExample: `3.91501956` becomes `3.92` and `3.9956` becomes `4`.\n",
                "operationId": "MaintainEmployeeLeaveBalances",
                "requestBody": {
                    "$ref": "#/components/requestBodies/RecordLeaveBalancesRequest"
                },
                "responses": {
                    "204": {
                        "description": "Employee Leave Balances created/updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "manage:employees:payroll"
                        ]
                    }
                ],
                "summary": "Creates/Updates employees leave balances",
                "tags": [
                    "Employees"
                ]
            }
        },
        "/accounts/{accountId}/employees/{employeeId}/retirement-savings": {
            "get": {
                "description": "Lists the retirement savings of an employee.\n",
                "operationId": "RetrieveEmployeeRetirementSavings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecordRetirementSavingsDetail"
                                }
                            }
                        },
                        "description": "The request was successful, the response contains an array of retirement saving (in summary form) for the employee, wrapped in pagination information."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "manage:employees:payroll"
                        ]
                    }
                ],
                "summary": "Retrieves retirement savings (SuperFund or KiwiSaver) details for an employee",
                "tags": [
                    "Employees"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an employee within an account.",
                    "example": "b48c9f429c93bc26664c1a5a4d1273",
                    "in": "path",
                    "name": "employeeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "Creates and Updates the Retirement Savings for this employee\n",
                "operationId": "MaintainEmployeeRetirementSaving",
                "requestBody": {
                    "$ref": "#/components/requestBodies/RecordRetirementSavingsRequest"
                },
                "responses": {
                    "204": {
                        "description": "Employee Retirement Savings updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "manage:employees:payroll"
                        ]
                    }
                ],
                "summary": "Creates and Updates the Retirement Savings for this employee",
                "tags": [
                    "Employees"
                ]
            }
        },
        "/accounts/{accountId}/employees/{employeeId}/tax-details": {
            "get": {
                "description": "Retrieves an employees tax details\n",
                "operationId": "RetrieveEmployeeTaxDetails",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecordTaxDetails"
                                }
                            }
                        },
                        "description": "The request was successful, the response contains the full tax details of an individual employee."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "read:employees:payroll"
                        ]
                    }
                ],
                "summary": "Retrieves an employees tax detail",
                "tags": [
                    "Employees"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an employee within an account.",
                    "example": "b48c9f429c93bc26664c1a5a4d1273",
                    "in": "path",
                    "name": "employeeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "Creates/Updates tax details for an employee.\n\nThe Tax File Number (`tfn`) is mandatory if Exempt Type (`exemptType`) is blank\n\nThe Exempt Type (`exemptType`) is mandatory if Tax File Number (`tfn`) is blank\n\nOffset Estimated Amount (`offsetEstimatedAmount`) is mandatory only if\nOther Tax Offset Claimed (`otherTaxOffsetClaimed`)\n is checked.  Value must be 0 or greater\n\nIncreased Tax Withholding Amount(`increasedTaxWithholdingAmount`) is mandatory only if\nUpward Variation Requested (`upwardVariationRequested`) is checked.  Value must be 0 or greater\n\nApproved Withholding Variation Percentage (`approvedWithholdingVariationPercentage`) is mandatory only if\nApproved Withholding Variation Percentage (`hasApprovedWithholdingVariation`) is checked.  Value must be\nbetween 0 and 100\n",
                "operationId": "MaintainEmployeeTaxDetails",
                "requestBody": {
                    "$ref": "#/components/requestBodies/RecordTaxDetailsRequest"
                },
                "responses": {
                    "204": {
                        "description": "Employee tax details created/updated successfully"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ProblemResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request was invalid due to incorrect or missing information in the body."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "manage:employees:payroll"
                        ]
                    }
                ],
                "summary": "Creates/Updates tax details for an employee",
                "tags": [
                    "Employees"
                ]
            }
        },
        "/accounts/{accountId}/employment-types": {
            "get": {
                "description": "Returns a list of all employment types accesible to an account.",
                "operationId": "ListEmploymentTypes",
                "parameters": [
                    {
                        "description": "A search string that contains `field:values` together with boolean operators, which can be used to filter the result.\n\n An asterix (`*`) can also be used as a wildcard for partial matches on words.\n Logical operators (`AND` and `OR`) can be used between terms.\n Terms can be grouped via parenthesis to build complex search queries (see examples below).\n\n The fields used in the field must be fields returned from the REST API endpoint.\n\n Some example filters:\n * `firstName:John` which would return employees whose firstName was John.\n * `surname:Smith OR surname:Klein` which would return employees whose surname was either Smith or Klein.\n * `surname:Smi*` which would return employees whose surname is Smith, Smits, Smithe, etc.\n * `type:LegalEntity AND postcode:2000` which would return all branches that are Legal Entities and in postcode 2000.\n * `postcode:2000 OR postcode:3000` which would return all branches in either postcode of 2000 or in postcode 3000.\n * `type:LegalEntity AND (postcode:2000 OR postcode:3000)` which would return all branches that are Legal Entities and in postcode 2000 or 3000.\n",
                        "example": "name:Scottie*",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "WIP Description\n\nSpecify the field, followed by asc/desc, separated by :\n",
                        "example": "sort=name:asc&sort=type:desc",
                        "explode": true,
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "WIP Description\n\nPagination: Indicates the number of items that would be in the results.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": 100,
                        "in": "query",
                        "name": "first",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: Start Cursor for the requested Page.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": "342dfs09ds329320",
                        "in": "query",
                        "name": "after",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: Indicates the number of items that would be in the results\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": 100,
                        "in": "query",
                        "name": "last",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: End Cursor for the requested Page.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": "531dfs09ds332932",
                        "in": "query",
                        "name": "before",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmploymentTypesPage"
                                }
                            }
                        },
                        "description": "The request was successful, the response contains an an array of employement types available to the account, wrapped in pagination information."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "read:accounts:referencedata"
                        ]
                    }
                ],
                "summary": "Lists employment types",
                "tags": [
                    "Reference Data"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/accounts/{accountId}/employment-statuses": {
            "get": {
                "description": "Returns a list of all employment statuses accessible to an account.",
                "operationId": "ListEmploymentStatuses",
                "parameters": [
                    {
                        "description": "A search string that contains `field:values` together with boolean operators, which can be used to filter the result.\n\n An asterix (`*`) can also be used as a wildcard for partial matches on words.\n Logical operators (`AND` and `OR`) can be used between terms.\n Terms can be grouped via parenthesis to build complex search queries (see examples below).\n\n The fields used in the field must be fields returned from the REST API endpoint.\n\n Some example filters:\n * `firstName:John` which would return employees whose firstName was John.\n * `surname:Smith OR surname:Klein` which would return employees whose surname was either Smith or Klein.\n * `surname:Smi*` which would return employees whose surname is Smith, Smits, Smithe, etc.\n * `type:LegalEntity AND postcode:2000` which would return all branches that are Legal Entities and in postcode 2000.\n * `postcode:2000 OR postcode:3000` which would return all branches in either postcode of 2000 or in postcode 3000.\n * `type:LegalEntity AND (postcode:2000 OR postcode:3000)` which would return all branches that are Legal Entities and in postcode 2000 or 3000.\n",
                        "example": "name:Scottie*",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "WIP Description\n\nSpecify the field, followed by asc/desc, separated by :\n",
                        "example": "sort=name:asc&sort=type:desc",
                        "explode": true,
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "WIP Description\n\nPagination: Indicates the number of items that would be in the results.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": 100,
                        "in": "query",
                        "name": "first",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: Start Cursor for the requested Page.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": "342dfs09ds329320",
                        "in": "query",
                        "name": "after",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: Indicates the number of items that would be in the results\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": 100,
                        "in": "query",
                        "name": "last",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: End Cursor for the requested Page.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": "531dfs09ds332932",
                        "in": "query",
                        "name": "before",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmploymentStatusesPage"
                                }
                            }
                        },
                        "description": "The request was successful, the response contains an an array of employement statuses available to the account, wrapped in pagination information."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "read:accounts:referencedata"
                        ]
                    }
                ],
                "summary": "Lists employee statuses",
                "tags": [
                    "Reference Data"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/accounts/{accountId}/genders": {
            "get": {
                "description": "Returns a list of all genders accessible to an account.",
                "operationId": "ListGenders",
                "parameters": [
                    {
                        "description": "A search string that contains `field:values` together with boolean operators, which can be used to filter the result.\n\n An asterix (`*`) can also be used as a wildcard for partial matches on words.\n Logical operators (`AND` and `OR`) can be used between terms.\n Terms can be grouped via parenthesis to build complex search queries (see examples below).\n\n The fields used in the field must be fields returned from the REST API endpoint.\n\n Some example filters:\n * `firstName:John` which would return employees whose firstName was John.\n * `surname:Smith OR surname:Klein` which would return employees whose surname was either Smith or Klein.\n * `surname:Smi*` which would return employees whose surname is Smith, Smits, Smithe, etc.\n * `type:LegalEntity AND postcode:2000` which would return all branches that are Legal Entities and in postcode 2000.\n * `postcode:2000 OR postcode:3000` which would return all branches in either postcode of 2000 or in postcode 3000.\n * `type:LegalEntity AND (postcode:2000 OR postcode:3000)` which would return all branches that are Legal Entities and in postcode 2000 or 3000.\n",
                        "example": "name:Scottie*",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "WIP Description\n\nSpecify the field, followed by asc/desc, separated by :\n",
                        "example": "sort=name:asc&sort=type:desc",
                        "explode": true,
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "WIP Description\n\nPagination: Indicates the number of items that would be in the results.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": 100,
                        "in": "query",
                        "name": "first",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: Start Cursor for the requested Page.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": "342dfs09ds329320",
                        "in": "query",
                        "name": "after",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: Indicates the number of items that would be in the results\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": 100,
                        "in": "query",
                        "name": "last",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: End Cursor for the requested Page.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": "531dfs09ds332932",
                        "in": "query",
                        "name": "before",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GendersPage"
                                }
                            }
                        },
                        "description": "The request was successful, the response contains an an array of genders available to the account, wrapped in pagination information."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "read:accounts:referencedata"
                        ]
                    }
                ],
                "summary": "Lists genders",
                "tags": [
                    "Reference Data"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/accounts/{accountId}/honorifics": {
            "get": {
                "description": "Returns a list of all honorifics accessible to an account.",
                "operationId": "ListHonorifics",
                "parameters": [
                    {
                        "description": "A search string that contains `field:values` together with boolean operators, which can be used to filter the result.\n\n An asterix (`*`) can also be used as a wildcard for partial matches on words.\n Logical operators (`AND` and `OR`) can be used between terms.\n Terms can be grouped via parenthesis to build complex search queries (see examples below).\n\n The fields used in the field must be fields returned from the REST API endpoint.\n\n Some example filters:\n * `firstName:John` which would return employees whose firstName was John.\n * `surname:Smith OR surname:Klein` which would return employees whose surname was either Smith or Klein.\n * `surname:Smi*` which would return employees whose surname is Smith, Smits, Smithe, etc.\n * `type:LegalEntity AND postcode:2000` which would return all branches that are Legal Entities and in postcode 2000.\n * `postcode:2000 OR postcode:3000` which would return all branches in either postcode of 2000 or in postcode 3000.\n * `type:LegalEntity AND (postcode:2000 OR postcode:3000)` which would return all branches that are Legal Entities and in postcode 2000 or 3000.\n",
                        "example": "name:Scottie*",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "WIP Description\n\nSpecify the field, followed by asc/desc, separated by :\n",
                        "example": "sort=name:asc&sort=type:desc",
                        "explode": true,
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "WIP Description\n\nPagination: Indicates the number of items that would be in the results.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": 100,
                        "in": "query",
                        "name": "first",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: Start Cursor for the requested Page.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": "342dfs09ds329320",
                        "in": "query",
                        "name": "after",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: Indicates the number of items that would be in the results\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": 100,
                        "in": "query",
                        "name": "last",
                        "required": false,
                        "schema": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "WIP Description\n\nPagination: End Cursor for the requested Page.\nNB: Pagination would be invalidated if the filter/sort parms change on a subsequent call.\n",
                        "example": "531dfs09ds332932",
                        "in": "query",
                        "name": "before",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HonorificsPage"
                                }
                            }
                        },
                        "description": "The request was successful, the response contains an an array of honorifics available to the account, wrapped in pagination information."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client authentication failed."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The user or client is authenticated, but does not have access ot the requested resource."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemResponse"
                                }
                            }
                        },
                        "description": "The specified object was not found, or is inaccessible to the authenticated user or client"
                    },
                    "500": {
                        "description": "An error occured while processing the request.\nIf you're reading this spec, chances are you know it's not you, it's us - if it keeps happening, let us know what's happening and we'll sort you.\n"
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "read:accounts:referencedata"
                        ]
                    }
                ],
                "summary": "Lists honorifics",
                "tags": [
                    "Reference Data"
                ]
            },
            "parameters": [
                {
                    "allowEmptyValue": false,
                    "description": "Unique identifier of an account.",
                    "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        }
    },
    "components": {
        "requestBodies": {
            "CandidateRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/CandidateInputDetail"
                        }
                    }
                },
                "description": "Details of the candidate to be created/updated.",
                "required": true
            },
            "CandidateConversionRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/CandidateConversionInputDetail"
                        }
                    }
                },
                "description": "Details of the candidate to be converted to an employee.",
                "required": true
            },
            "RecordMergeRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RecordMergeInputDetail"
                        }
                    }
                },
                "description": "Details of the record to be merged.",
                "required": true
            },
            "EmployeeRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/EmployeeInputDetail"
                        }
                    }
                },
                "description": "Details of the employee to be created/updated.",
                "required": true
            },
            "EmployeeTerminationRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/EmployeeTerminationInputDetail"
                        }
                    }
                },
                "description": "Termination Details of the employee to be terminated.",
                "required": true
            },
            "RecordTransferInputRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RecordTransferInputDetail"
                        }
                    }
                },
                "description": "Fields needed to facilitate the transfer.",
                "required": true
            },
            "RecordBankAccountsRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RecordBankAccountsInput"
                        }
                    }
                },
                "description": "Details of the bank accouts to be created/updated.",
                "required": true
            },
            "RecordLeaveBalancesRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RecordLeaveBalancesInput"
                        }
                    }
                },
                "description": "Details of the leave balances to be created/updated.",
                "required": true
            },
            "RecordRetirementSavingsRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RecordRetirementSavingsDetailInput"
                        }
                    }
                },
                "description": "Details of the retirment savings to be created/updated.",
                "required": true
            },
            "RecordTaxDetailsRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RecordTaxDetailsInput"
                        }
                    }
                },
                "description": "Details of the tax details to be created/updated.",
                "required": true
            }
        },
        "schemas": {
            "CurrentUser": {
                "description": "Details of the authenticated user",
                "properties": {
                    "username": {
                        "description": "The currently authenticated user's username",
                        "example": "hr@example.com",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ProblemResponse": {
                "description": "This object will be returned whenever there is an error/problem with the request.\nIt contains all the details needed to handle the error in your code.\n",
                "example": {
                    "type": "http://rest.enablehr.com/problem/not-found",
                    "title": "Not Found",
                    "detail": "The thing you were looking for was not found",
                    "status": 404,
                    "instance": "http://rest.enablehr.com/thing/0",
                    "extensions": {
                        "key": "value"
                    }
                },
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "title": {
                        "nullable": false,
                        "type": "string"
                    },
                    "detail": {
                        "nullable": false,
                        "type": "string"
                    },
                    "status": {
                        "nullable": false,
                        "type": "integer"
                    },
                    "instance": {
                        "type": "string"
                    },
                    "extensions": {
                        "type": "object"
                    }
                },
                "required": [
                    "status",
                    "title"
                ],
                "type": "object"
            },
            "ActionStatusDetail": {
                "description": "This object will be returned whenever there is an error/problem with the request.\nIt contains all the details needed to handle the error in your code.\n",
                "properties": {
                    "id": {
                        "description": "The identifier for the ActionStatusDetail",
                        "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                        "type": "string"
                    },
                    "actionStatus": {
                        "$ref": "#/components/schemas/ActionStatuses"
                    },
                    "referenceId": {
                        "description": "The id of the item this action is being performed on",
                        "example": "90865b96960643738e7e0441c11e6791",
                        "type": "string"
                    },
                    "referenceType": {
                        "$ref": "#/components/schemas/ActionReferenceTypes"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ActionTypes"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when this action was created (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when this action was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    }
                },
                "required": [
                    "actionStatus",
                    "id",
                    "type"
                ],
                "type": "object"
            },
            "ActionStatuses": {
                "enum": [
                    "Pending",
                    "In_Progress",
                    "Completed",
                    "Failed"
                ],
                "example": "Pending",
                "type": "string"
            },
            "ActionReferenceTypes": {
                "enum": [
                    "Employee",
                    "Candidate",
                    "User"
                ],
                "example": "Employee",
                "type": "string"
            },
            "ActionTypes": {
                "enum": [
                    "Terminate_Employee",
                    "Transfer_Employee_Move_Everything",
                    "Transfer_Employee_Copy",
                    "Transfer_Employee_Move_Everything_No_Trace",
                    "Convert_Candidate_To_Employee",
                    "Merge_Candidate"
                ],
                "example": "Terminate_Employee",
                "type": "string"
            },
            "BranchesPage": {
                "description": "A wrapper for the Branch which includes pagination information and an array of Branches",
                "properties": {
                    "pageInfo": {
                        "$ref": "#/components/schemas/PageInfo"
                    },
                    "data": {
                        "description": "An array of branches",
                        "items": {
                            "$ref": "#/components/schemas/BranchesPage_data"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "BranchSummary": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BranchReference"
                    },
                    {
                        "$ref": "#/components/schemas/BranchSummary_allOf"
                    }
                ],
                "description": "Summary information for the branch",
                "type": "object"
            },
            "BranchReference": {
                "description": "Reference information for the branch containing id, name, path",
                "properties": {
                    "id": {
                        "description": "Unique identifier of a branch",
                        "example": "939983e636e6477a82bad130c33dd12a",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the branch",
                        "example": "Jo's Plumbing North Sydney",
                        "type": "string"
                    },
                    "path": {
                        "description": "This is a representation of the path hierarchy.\nIt is a string concatenation the name of the branch with the names of all the parents of a branch till the root.\n",
                        "example": "/Jo's Industries/NSW/Jo's Plumbing North Sydney",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BranchDetail": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BranchReference"
                    },
                    {
                        "$ref": "#/components/schemas/BranchDetail_allOf"
                    }
                ],
                "description": "Detailed information for the branch",
                "type": "object"
            },
            "CandidatesPage": {
                "description": "A wrapper for the Candidate which includes pagination information and an array of Candidates",
                "properties": {
                    "pageInfo": {
                        "$ref": "#/components/schemas/PageInfo"
                    },
                    "data": {
                        "description": "An array of candidates",
                        "items": {
                            "$ref": "#/components/schemas/CandidatesPage_data"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "CandidateSummary": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CandidateReference"
                    },
                    {
                        "$ref": "#/components/schemas/CandidateSummary_allOf"
                    }
                ],
                "description": "Summary information for the candidate",
                "type": "object"
            },
            "CandidateReference": {
                "description": "Contains common information across all candidates",
                "properties": {
                    "id": {
                        "description": "Unique identifier of an candidate",
                        "example": "4eb62cb48c9f492c93bc26664c1a5a4d",
                        "type": "string"
                    },
                    "candidateNumber": {
                        "description": "Unique number assigned by the company to identify candidate within an account",
                        "example": "1434",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CandidateInputDetail": {
                "description": "Provides details for creating or updating an candidate.",
                "properties": {
                    "branchId": {
                        "description": "Branch ID of the candidate",
                        "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "title": {
                        "example": "Mr",
                        "maxLength": 128,
                        "type": "string"
                    },
                    "firstName": {
                        "description": "First name of the candidate",
                        "example": "Michael",
                        "maxLength": 128,
                        "minLength": 1,
                        "type": "string"
                    },
                    "middleName": {
                        "description": "Middle name of the candidate",
                        "example": "K",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "surname": {
                        "description": "Surname or last name of the candidate",
                        "example": "Johnson",
                        "maxLength": 128,
                        "minLength": 1,
                        "type": "string"
                    },
                    "preferredName": {
                        "description": "Preferred name of the candidate",
                        "example": "Mike",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "nickname": {
                        "description": "Nick name of the candidate",
                        "example": "Mickey",
                        "maxLength": 128,
                        "type": "string"
                    },
                    "personalAddress": {
                        "$ref": "#/components/schemas/AddressDetail"
                    },
                    "postalAddress": {
                        "$ref": "#/components/schemas/AddressDetail"
                    },
                    "contacts": {
                        "$ref": "#/components/schemas/RecordContactDetail"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/Genders"
                    },
                    "dateOfBirth": {
                        "description": "Birthdate of the candidate (accepted format is YYYY-MM-DD)",
                        "example": "1974-05-21",
                        "maxLength": 10,
                        "minLength": 10,
                        "pattern": "^(19\\d{2}|20([0-4]\\d|50))-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$",
                        "type": "string"
                    },
                    "positionTitle": {
                        "description": "The title of the position associated to the candidate (Manager, CTO, CEO)",
                        "example": "Manager",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "candidateNumber": {
                        "description": "Unique number assigned by the company to identify candidate within an account.",
                        "example": "12464",
                        "maxLength": 64,
                        "type": "string"
                    },
                    "proposedCommencementDate": {
                        "description": "Proposed Start date of the employment (accepted format is YYYY-MM-DD)",
                        "example": "2017-12-25",
                        "maxLength": 10,
                        "minLength": 10,
                        "pattern": "^(19\\d{2}|20([0-4]\\d|50))-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$",
                        "type": "string"
                    },
                    "candidateStatusInput": {
                        "$ref": "#/components/schemas/CandidateStatuses"
                    }
                },
                "required": [
                    "branchId",
                    "firstName",
                    "surname"
                ],
                "type": "object"
            },
            "CandidateDetail": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CandidateReference"
                    },
                    {
                        "$ref": "#/components/schemas/CandidateDetail_allOf"
                    }
                ],
                "description": "Detailed information for the candidate",
                "type": "object"
            },
            "CandidateConversionInputDetail": {
                "description": "Provides additional details for Conversion of a Candidate to an Employee.",
                "properties": {
                    "commencementDate": {
                        "description": "Commencement Date of the candidate (accepted format is YYYY-MM-DD)",
                        "example": "2020-08-01",
                        "maxLength": 10,
                        "minLength": 10,
                        "pattern": "^(19\\d{2}|20([0-4]\\d|50))-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ActionStatusResponse": {
                "description": "This object will be returned whenever there is an action status that goes with the request.\nIt contains all the details needed to retrieve the status in your code.\n",
                "example": {
                    "actionStatusURL": "http://api.enablehr.com/accounts/{acctId}/action-status/{actionStatusId}"
                },
                "properties": {
                    "actionStatusURL": {
                        "maxLength": 512,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "actionStatusURL"
                ],
                "type": "object"
            },
            "RecordMergeInputDetail": {
                "description": "Provides details for merging this record with another.",
                "properties": {
                    "recordId": {
                        "description": "Record ID of the source record",
                        "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "recordId"
                ],
                "type": "object"
            },
            "EmployeesPage": {
                "description": "A wrapper for the Employee which includes pagination information and an array of Employees",
                "properties": {
                    "pageInfo": {
                        "$ref": "#/components/schemas/PageInfo"
                    },
                    "data": {
                        "description": "An array of employees",
                        "items": {
                            "$ref": "#/components/schemas/EmployeesPage_data"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "EmployeeSummary": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/EmployeeReference"
                    },
                    {
                        "$ref": "#/components/schemas/EmployeeSummary_allOf"
                    }
                ],
                "description": "Summary information for the employee",
                "type": "object"
            },
            "EmployeeReference": {
                "description": "Contains common information across all employees",
                "properties": {
                    "id": {
                        "description": "Unique identifier of an employee",
                        "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                        "type": "string"
                    },
                    "employeeNumber": {
                        "description": "Unique number assigned by the company to identify employee within an account",
                        "example": "Transferred",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EmployeeInputDetail": {
                "description": "Provides details for creating or updating an employee.",
                "properties": {
                    "branchId": {
                        "description": "Branch ID of the employee",
                        "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "title": {
                        "example": "Mr",
                        "maxLength": 128,
                        "type": "string"
                    },
                    "firstName": {
                        "description": "First name of the employee",
                        "example": "Michael",
                        "maxLength": 128,
                        "minLength": 1,
                        "type": "string"
                    },
                    "middleName": {
                        "description": "Middle name of the employee",
                        "example": "K",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "surname": {
                        "description": "Surname or last name of the employee",
                        "example": "Johnson",
                        "maxLength": 128,
                        "minLength": 1,
                        "type": "string"
                    },
                    "preferredName": {
                        "description": "Preferred name of the employee",
                        "example": "Mike",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "nickname": {
                        "description": "Nick name of the employee",
                        "example": "Mickey",
                        "maxLength": 128,
                        "type": "string"
                    },
                    "personalAddress": {
                        "$ref": "#/components/schemas/AddressDetail"
                    },
                    "postalAddress": {
                        "$ref": "#/components/schemas/AddressDetail"
                    },
                    "contacts": {
                        "$ref": "#/components/schemas/RecordContactDetail"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/Genders"
                    },
                    "dateOfBirth": {
                        "description": "Birthdate of the employees (accepted format is YYYY-MM-DD)",
                        "example": "1974-05-21",
                        "maxLength": 10,
                        "minLength": 10,
                        "pattern": "^(19\\d{2}|20([0-4]\\d|50))-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$",
                        "type": "string"
                    },
                    "positionTitle": {
                        "description": "The title of the position associated to the employee (Manager, CTO, CEO)",
                        "example": "Manager",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "employeeNumber": {
                        "description": "Unique number assigned by the company to identify employee within an account.",
                        "example": "Manager",
                        "maxLength": 64,
                        "type": "string"
                    },
                    "employmentType": {
                        "$ref": "#/components/schemas/EmploymentTypes"
                    },
                    "employmentStatus": {
                        "$ref": "#/components/schemas/EmploymentStatuses"
                    },
                    "commencementDate": {
                        "description": "Start date of the employment (accepted format is YYYY-MM-DD)",
                        "example": "2017-12-25",
                        "maxLength": 10,
                        "minLength": 10,
                        "pattern": "^(19\\d{2}|20([0-4]\\d|50))-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$",
                        "type": "string"
                    }
                },
                "required": [
                    "branchId",
                    "firstName",
                    "surname"
                ],
                "type": "object"
            },
            "EmployeeDetail": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/EmployeeReference"
                    },
                    {
                        "$ref": "#/components/schemas/EmployeeDetail_allOf"
                    }
                ],
                "description": "Detailed information for the employee",
                "type": "object"
            },
            "EmployeeTerminationInputDetail": {
                "description": "Provides additional details for Termination of an Employee.",
                "properties": {
                    "endDate": {
                        "description": "Termination date of the employee (accepted format is YYYY-MM-DD)",
                        "example": "2020-08-01",
                        "maxLength": 10,
                        "minLength": 10,
                        "pattern": "^(19\\d{2}|20([0-4]\\d|50))-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$",
                        "type": "string"
                    },
                    "terminatedBy": {
                        "description": "The person responsible for the termination",
                        "maxLength": 256,
                        "type": "string"
                    },
                    "terminationMethod": {
                        "$ref": "#/components/schemas/TerminationMethods"
                    },
                    "terminationComments": {
                        "description": "Additional Comments relating to the termination",
                        "type": "string"
                    }
                },
                "required": [
                    "endDate",
                    "terminationMethod"
                ],
                "type": "object"
            },
            "TerminationMethods": {
                "enum": [
                    "By_Consent",
                    "By_Notice",
                    "Summarily",
                    "By_Other_Means"
                ],
                "example": "By_Consent",
                "type": "string"
            },
            "RecordTransferInputDetail": {
                "description": "Provides details for tranfer.",
                "properties": {
                    "effectiveDate": {
                        "description": "Transfer date of the record (accepted format is YYYY-MM-DD)",
                        "example": "2017-12-25",
                        "maxLength": 10,
                        "minLength": 10,
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                        "type": "string"
                    },
                    "toBranchId": {
                        "description": "Destination Branch Id",
                        "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "transferType": {
                        "$ref": "#/components/schemas/TransferTypes"
                    }
                },
                "required": [
                    "toBranchId",
                    "transferType"
                ],
                "type": "object"
            },
            "TransferTypes": {
                "enum": [
                    "Move_Everything",
                    "Create_Copy",
                    "Move_Everything_No_Trace"
                ],
                "type": "string"
            },
            "RecordBankAccounts": {
                "description": "Bank Accounts details",
                "properties": {
                    "au": {
                        "$ref": "#/components/schemas/RecordBankAccountAUList"
                    },
                    "nz": {
                        "$ref": "#/components/schemas/RecordBankAccountNZList"
                    }
                },
                "type": "object"
            },
            "RecordBankAccountAUList": {
                "items": {
                    "$ref": "#/components/schemas/RecordBankAccountAU"
                },
                "type": "array"
            },
            "RecordBankAccountAU": {
                "description": "Bank Accounts details for Australia",
                "properties": {
                    "id": {
                        "description": "ID of the bank detail",
                        "example": "19876543adfg",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "bsb": {
                        "description": "BSB Number",
                        "example": "012-123",
                        "maxLength": 16,
                        "minLength": 1,
                        "type": "string"
                    },
                    "number": {
                        "description": "Bank Account Number",
                        "example": "136543",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "name": {
                        "description": "Account name",
                        "example": "Michael Hardware Supplies",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "amountInCents": {
                        "description": "Amount in Cents",
                        "example": 1234500,
                        "type": "integer"
                    },
                    "statementText": {
                        "description": "Statement Text",
                        "example": "Salary Transfer",
                        "maxLength": 64,
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    },
                    "remainder": {
                        "description": "Remainder",
                        "example": true,
                        "type": "boolean"
                    },
                    "accountOrder": {
                        "description": "Account Order",
                        "example": 1,
                        "maximum": 3,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the bank detail was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "minLength": 1,
                        "nullable": false,
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the bank detail was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "minLength": 1,
                        "nullable": false,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RecordBankAccountNZList": {
                "items": {
                    "$ref": "#/components/schemas/RecordBankAccountNZ"
                },
                "type": "array"
            },
            "RecordBankAccountNZ": {
                "description": "Bank Accounts details for New Zealand",
                "properties": {
                    "id": {
                        "description": "ID of the bank detail",
                        "example": "19876543adfg",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "number": {
                        "description": "Bank Account Number",
                        "example": "136543",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "name": {
                        "description": "Account name",
                        "example": "Michael Hardware Supplies",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "amountInCents": {
                        "description": "Amount in Cents",
                        "example": 1234500,
                        "type": "integer"
                    },
                    "statementText": {
                        "description": "Statement Text",
                        "example": "Salary Transfer",
                        "maxLength": 64,
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    },
                    "remainder": {
                        "description": "Remainder",
                        "example": true,
                        "type": "boolean"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the bank detail was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "minLength": 1,
                        "nullable": false,
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the bank detail was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "minLength": 1,
                        "nullable": false,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RecordBankAccountsInput": {
                "description": "Provides details for creating or updating bank accounts",
                "properties": {
                    "au": {
                        "$ref": "#/components/schemas/RecordBankAccountInputAUList"
                    },
                    "nz": {
                        "$ref": "#/components/schemas/RecordBankAccountInputNZList"
                    }
                },
                "type": "object"
            },
            "RecordBankAccountInputAUList": {
                "items": {
                    "$ref": "#/components/schemas/RecordBankAccountInputAU"
                },
                "maxItems": 4,
                "minItems": 1,
                "type": "array"
            },
            "RecordBankAccountInputAU": {
                "description": "Provides details for creating or updating bank accounts for Australia",
                "properties": {
                    "id": {
                        "description": "ID of the employee bank details",
                        "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                        "type": "string"
                    },
                    "bsb": {
                        "description": "BSB",
                        "example": "012-123",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "number": {
                        "description": "Bank Account Number",
                        "example": "098765432",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "name": {
                        "description": "Account Name",
                        "example": "Savings",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "amountInCents": {
                        "description": "Amount in Cents",
                        "example": 1234500,
                        "type": "integer"
                    },
                    "statementText": {
                        "description": "Statement Text",
                        "example": "Salary Transfer",
                        "maxLength": 64,
                        "minLength": 0,
                        "type": "string"
                    },
                    "remainder": {
                        "description": "Remainder",
                        "example": true,
                        "type": "boolean"
                    },
                    "accountOrder": {
                        "description": "Account Order",
                        "example": 1,
                        "maximum": 3,
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "accountOrder",
                    "bsb",
                    "name",
                    "number",
                    "remainder"
                ],
                "type": "object"
            },
            "RecordBankAccountInputNZList": {
                "items": {
                    "$ref": "#/components/schemas/RecordBankAccountInputNZ"
                },
                "maxItems": 4,
                "minItems": 1,
                "type": "array"
            },
            "RecordBankAccountInputNZ": {
                "description": "Provides details for creating or updating bank accounts for New Zealand",
                "properties": {
                    "id": {
                        "description": "ID of the employee bank details",
                        "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                        "type": "string"
                    },
                    "number": {
                        "description": "Bank Account Number",
                        "example": "098765432",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "name": {
                        "description": "Account Name",
                        "example": "Savings",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "amountInCents": {
                        "description": "Amount in Cents",
                        "example": 1234500,
                        "type": "integer"
                    },
                    "statementText": {
                        "description": "Statement Text",
                        "example": "Salary Transfer",
                        "maxLength": 64,
                        "minLength": 0,
                        "type": "string"
                    },
                    "remainder": {
                        "description": "Remainder",
                        "example": true,
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "number",
                    "remainder"
                ],
                "type": "object"
            },
            "RecordLeaveBalanceDetail": {
                "description": "Leave balances details",
                "properties": {
                    "au": {
                        "$ref": "#/components/schemas/RecordLeaveBalanceDetailAU"
                    },
                    "nz": {
                        "$ref": "#/components/schemas/RecordLeaveBalanceDetailNZ"
                    }
                },
                "type": "object"
            },
            "RecordLeaveBalanceDetailAU": {
                "description": "Leave balances details for Australia",
                "properties": {
                    "annualLeave": {
                        "description": "Leave Balance Type",
                        "example": 2.5,
                        "type": "number"
                    },
                    "personalLeave": {
                        "description": "Leave Balance Type",
                        "example": 1.35,
                        "type": "number"
                    },
                    "longServiceLeave": {
                        "description": "Leave Balance Type",
                        "example": 21.4,
                        "type": "number"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the leave balance was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the leave balance was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RecordLeaveBalanceDetailNZ": {
                "description": "Leave balances details for New Zealand",
                "properties": {
                    "annualLeave": {
                        "description": "Leave Balance Type",
                        "example": 2.5,
                        "type": "number"
                    },
                    "sickLeave": {
                        "description": "Leave Balance Type",
                        "example": 1.35,
                        "type": "number"
                    },
                    "parentalLeave": {
                        "description": "Leave Balance Type",
                        "example": 21.4,
                        "type": "number"
                    },
                    "alternativeHolidays": {
                        "description": "Leave Balance Type",
                        "example": 2.5,
                        "type": "number"
                    },
                    "longServiceLeave": {
                        "description": "Leave Balance Type",
                        "example": 1.35,
                        "type": "number"
                    },
                    "bereavementLeave": {
                        "description": "Leave Balance Type",
                        "example": 21.4,
                        "type": "number"
                    },
                    "domesticViolenceLeave": {
                        "description": "Leave Balance Type",
                        "example": 21.4,
                        "type": "number"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the leave balance was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the leave balance was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RecordLeaveBalancesInput": {
                "description": "Provides details for creating or updating leave balances\n\n The leave balances are captured in hours. If the user\nis providing more than 2 decimal places then we round-off the leave balance.\nExample: 3.91501956 becomes 3.92 and 3.9956 becomes 4.\n",
                "properties": {
                    "au": {
                        "$ref": "#/components/schemas/RecordLeaveBalanceInputAU"
                    },
                    "nz": {
                        "$ref": "#/components/schemas/RecordLeaveBalanceInputNZ"
                    }
                },
                "type": "object"
            },
            "RecordLeaveBalanceInputAU": {
                "description": "Provides details for creating or updating leave balances in Australia",
                "properties": {
                    "annualLeave": {
                        "description": "Annual Leave in hours",
                        "example": 2.45,
                        "type": "number"
                    },
                    "personalLeave": {
                        "description": "Personal Leave in hours",
                        "example": 3.56,
                        "type": "number"
                    },
                    "longServiceLeave": {
                        "description": "Long Service Leave in hours",
                        "example": 4.67,
                        "type": "number"
                    }
                },
                "required": [
                    "annualLeave",
                    "longServiceLeave",
                    "personalLeave"
                ],
                "type": "object"
            },
            "RecordLeaveBalanceInputNZ": {
                "description": "Provides details for creating or updating leave balances in New Zealand",
                "properties": {
                    "annualLeave": {
                        "description": "Annual Leave in hours",
                        "example": 2.5,
                        "type": "number"
                    },
                    "sickLeave": {
                        "description": "Sick Leave in hours",
                        "example": 1.35,
                        "type": "number"
                    },
                    "parentalLeave": {
                        "description": "Long Service Leave in hours",
                        "example": 21.4,
                        "type": "number"
                    },
                    "alternativeHolidays": {
                        "description": "Alternative Holidays",
                        "example": 2.5,
                        "type": "number"
                    },
                    "longServiceLeave": {
                        "description": "Long Service Leave in hours",
                        "example": 1.35,
                        "type": "number"
                    },
                    "bereavementLeave": {
                        "description": "Bereavement Leave in hours",
                        "example": 21.4,
                        "type": "number"
                    },
                    "domesticViolenceLeave": {
                        "description": "Domestic Violence Leave in hours",
                        "example": 21.4,
                        "type": "number"
                    }
                },
                "required": [
                    "alternativeHolidays",
                    "annualLeave",
                    "bereavementLeave",
                    "domesticViolenceLeave",
                    "longServiceLeave",
                    "parentalLeave",
                    "sickLeave"
                ],
                "type": "object"
            },
            "RecordRetirementSavingsDetail": {
                "description": "Retirement Savings details ( SuperFund (AU), KiwiSaver (NZ) )",
                "properties": {
                    "au": {
                        "description": "An array of super funds",
                        "items": {
                            "$ref": "#/components/schemas/RecordSuperFundDetail"
                        },
                        "type": "array"
                    },
                    "nz": {
                        "$ref": "#/components/schemas/RecordKiwiSaverDetail"
                    }
                },
                "type": "object"
            },
            "RecordSuperFundDetail": {
                "description": "Super Fund details",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the retirement saving",
                        "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                        "type": "string"
                    },
                    "memberNumber": {
                        "description": "Unique number assigned by the company to identify the record within an account",
                        "example": "abc098ijn176",
                        "minLength": 1,
                        "nullable": false,
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/SuperFundTypes"
                    },
                    "name": {
                        "description": "Name of the retirement saving",
                        "example": "Johnson",
                        "maxLength": 255,
                        "minLength": 1,
                        "nullable": false,
                        "type": "string"
                    },
                    "abn": {
                        "description": "ABN of the retirement saving",
                        "example": "65 714 394 898",
                        "maxLength": 20,
                        "minLength": 1,
                        "nullable": false,
                        "type": "string"
                    },
                    "esa": {
                        "description": "Electronic Service Address",
                        "example": "ESUPERFUND",
                        "maxLength": 64,
                        "nullable": true,
                        "type": "string"
                    },
                    "usi": {
                        "description": "Retirement Saving ID (USI)",
                        "example": "STA0100AU",
                        "maxLength": 64,
                        "nullable": true,
                        "type": "string"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the retirement saving was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "nullable": false,
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the retirement saving was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "nullable": false,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SuperFundTypes": {
                "description": "The type of RetirementSaving",
                "enum": [
                    "REGULATED",
                    "SMSF"
                ],
                "example": "REGULATED",
                "type": "string"
            },
            "RecordKiwiSaverDetail": {
                "description": "KiwiSaver details",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/KiwiSaverStatus"
                    },
                    "employerContributionPercentage": {
                        "description": "Employer Contribution Percentage",
                        "example": "4",
                        "nullable": true,
                        "type": "string"
                    },
                    "employeeContributionPercentage": {
                        "description": "Employee Contribution Percentage (allowed values 3, 4, 6, 8, 10)",
                        "example": "7.5",
                        "nullable": true,
                        "type": "string"
                    },
                    "esctPercentage": {
                        "description": "Employer Contribution Tax (allowed values: 10.5, 17.5, 30, 33)",
                        "example": "17.5",
                        "nullable": true,
                        "type": "string"
                    },
                    "optOutDate": {
                        "description": "Opt Out Date",
                        "example": "2021-02-01",
                        "nullable": true,
                        "type": "string"
                    },
                    "suspensionEndDate": {
                        "description": "Suspension End Date",
                        "example": "2021-02-01",
                        "nullable": true,
                        "type": "string"
                    },
                    "bankAccountNumber": {
                        "description": "Bank Account Number (for OPT_OUT)",
                        "example": "1111111111111111",
                        "nullable": true,
                        "type": "string"
                    },
                    "accountHolderName": {
                        "description": "Account Holder Name (for OPT_OUT)",
                        "example": "Mr J Blogs",
                        "nullable": true,
                        "type": "string"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the retirement saving was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "nullable": false,
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the retirement saving was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "nullable": false,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "KiwiSaverStatus": {
                "description": "The KiwiSaver status",
                "enum": [
                    "ACTIVE",
                    "OPT_OUT",
                    "SAVINGS_SUSPENSION",
                    "NOT_A_MEMBER"
                ],
                "example": "ACTIVE",
                "type": "string"
            },
            "RecordRetirementSavingsDetailInput": {
                "description": "Provides details for creating or updating retirement savings",
                "properties": {
                    "au": {
                        "$ref": "#/components/schemas/RecordSuperFundDetailInputList"
                    },
                    "nz": {
                        "$ref": "#/components/schemas/RecordKiwiSaverDetailInput"
                    }
                },
                "type": "object"
            },
            "RecordSuperFundDetailInputList": {
                "items": {
                    "$ref": "#/components/schemas/RecordSuperFundDetailInput"
                },
                "type": "array"
            },
            "RecordSuperFundDetailInput": {
                "description": "Provides details for creating or updating Super Fund for Australia",
                "properties": {
                    "id": {
                        "description": "enableHR UUID identifier for this SuperFundLine (needed for updates)",
                        "example": "2df68549-eebd-43e7-bd9e-c12f3d14f214",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "memberNumber": {
                        "description": "Unique number assigned by the company to identify the record within an account",
                        "example": "abc098ijn176",
                        "minLength": 1,
                        "nullable": false,
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/SuperFundTypes"
                    },
                    "name": {
                        "description": "Name of the retirement saving",
                        "example": "Johnson",
                        "maxLength": 255,
                        "minLength": 1,
                        "nullable": false,
                        "type": "string"
                    },
                    "abn": {
                        "description": "ABN of the retirement saving",
                        "example": "65 714 394 898",
                        "maxLength": 20,
                        "minLength": 1,
                        "nullable": false,
                        "type": "string"
                    },
                    "usi": {
                        "description": "Retirement Saving ID (USI)",
                        "example": "STA0100AU",
                        "maxLength": 64,
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "abn",
                    "memberNumber",
                    "name",
                    "type"
                ],
                "type": "object"
            },
            "RecordKiwiSaverDetailInput": {
                "description": "Provides details for creating or updating KiwiSaver for new Zealand",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/KiwiSaverStatus"
                    },
                    "employerContributionPercentage": {
                        "description": "Employer Contribution Percentage",
                        "example": "4",
                        "nullable": true,
                        "type": "string"
                    },
                    "employeeContributionPercentage": {
                        "description": "Employee Contribution Percentage (allowed values 3, 4, 6, 8, 10)",
                        "example": "7.5",
                        "nullable": true,
                        "type": "string"
                    },
                    "esctPercentage": {
                        "description": "Employer Contribution Tax (allowed values: 10.5, 17.5, 30, 33)",
                        "example": "17.5",
                        "nullable": true,
                        "type": "string"
                    },
                    "optOutDate": {
                        "description": "Opt Out Date",
                        "example": "2021-02-01",
                        "nullable": true,
                        "type": "string"
                    },
                    "suspensionEndDate": {
                        "description": "Suspension End Date",
                        "example": "2021-02-01",
                        "nullable": true,
                        "type": "string"
                    },
                    "bankAccountNumber": {
                        "description": "Bank Account Number (for OPT_OUT)",
                        "example": "1111111111111111",
                        "nullable": true,
                        "type": "string"
                    },
                    "accountHolderName": {
                        "description": "Account Holder Name (for OPT_OUT)",
                        "example": "Mr J Blogs",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "status"
                ],
                "type": "object"
            },
            "RecordTaxDetails": {
                "description": "Tax details",
                "properties": {
                    "au": {
                        "$ref": "#/components/schemas/RecordTaxDetailsAU"
                    },
                    "nz": {
                        "$ref": "#/components/schemas/RecordTaxDetailsNZ"
                    }
                },
                "type": "object"
            },
            "RecordTaxDetailsAU": {
                "description": "Tax details for Australia",
                "properties": {
                    "tfn": {
                        "description": "Tax File Number",
                        "example": "633098123",
                        "maxLength": 11,
                        "nullable": true,
                        "type": "string"
                    },
                    "exemptType": {
                        "$ref": "#/components/schemas/ExemptTypes"
                    },
                    "employmentBasis": {
                        "$ref": "#/components/schemas/EmploymentBasis"
                    },
                    "residencyStatus": {
                        "$ref": "#/components/schemas/ResidencyStatuses"
                    },
                    "taxFreeThresholdClaimed": {
                        "description": "Tax Free Threshold Claimed",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "tradeLoanSupport": {
                        "description": "Trade Loan Support",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "hecsSupported": {
                        "description": "Hecs Supported",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "studentStartupLoan": {
                        "description": "Student Startup Loan",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "financialSupplementDebt": {
                        "description": "Financial Supplement Debt",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "australianResidentForTaxPurposes": {
                        "description": "Australian Resident for Tax Purposes",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "eligibleToReceiveLeaveLoading": {
                        "description": "Eligible To Receive Leave Loading",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "otherTaxOffsetClaimed": {
                        "description": "Other Tax Offset Claimed",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "offsetEstimatedAmountInCents": {
                        "description": "Other Tax Offset Claimed (in Cents)",
                        "example": 12345,
                        "nullable": true,
                        "type": "integer"
                    },
                    "upwardVariationRequested": {
                        "description": "Upward Variation Requested",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "increasedTaxWithholdingAmountInCents": {
                        "description": "Increased Tax Withholding Amount (in Cents)",
                        "example": 12345,
                        "nullable": true,
                        "type": "integer"
                    },
                    "hasApprovedWithholdingVariation": {
                        "description": "Has Approved Withholding Variation",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "approvedWithholdingVariationPercentage": {
                        "description": "Approved Withholding Variation Percentage",
                        "example": "18.5",
                        "nullable": true,
                        "type": "string"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the tax detail was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the tax detail was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ExemptTypes": {
                "description": "A list of all Exempt Types in a tax detail.",
                "enum": [
                    "UNQUOTED",
                    "PENDING",
                    "UNDER18",
                    "PENSIONER"
                ],
                "example": "UNQUOTED",
                "type": "string"
            },
            "EmploymentBasis": {
                "description": "A list of all Employment Basis' in a tax detail.",
                "enum": [
                    "FULL_TIME",
                    "PART_TIME",
                    "CASUAL",
                    "LABOUR_HIRE",
                    "SUPER_INCOME_STREAM"
                ],
                "example": "FULL_TIME",
                "type": "string"
            },
            "ResidencyStatuses": {
                "description": "A list of all Residency Statuses in a tax detail.",
                "enum": [
                    "AUSTRALIAN_RESIDENT",
                    "FOREIGN_RESIDENT",
                    "WORKING_HOLIDAY_MAKER"
                ],
                "example": "AUSTRALIAN_RESIDENT",
                "type": "string"
            },
            "RecordTaxDetailsNZ": {
                "description": "Tax details for New Zealand",
                "properties": {
                    "taxCode": {
                        "$ref": "#/components/schemas/TaxCode"
                    },
                    "studentLoanPercentage": {
                        "description": "Student Loan Percentage",
                        "example": "7.0",
                        "nullable": true,
                        "type": "string"
                    },
                    "irdNumber": {
                        "description": "IRD Number",
                        "example": "875630954",
                        "nullable": true,
                        "type": "string"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the tax detail was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the tax detail was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TaxCode": {
                "description": "A list of all Tax Codes in a NZ tax detail.",
                "enum": [
                    "CAE",
                    "M",
                    "M_SL",
                    "ME",
                    "ME_SL",
                    "ND",
                    "NSW",
                    "S",
                    "S_SL",
                    "SA",
                    "SA_SL",
                    "SB",
                    "SB_SL",
                    "SH",
                    "SH_SL",
                    "ST",
                    "ST_SL",
                    "STC",
                    "WT"
                ],
                "example": "CAE",
                "type": "string"
            },
            "RecordTaxDetailsInput": {
                "description": "Provides details for creating or updating tax information",
                "properties": {
                    "au": {
                        "$ref": "#/components/schemas/RecordTaxDetailsInputAU"
                    },
                    "nz": {
                        "$ref": "#/components/schemas/RecordTaxDetailsInputNZ"
                    }
                },
                "type": "object"
            },
            "RecordTaxDetailsInputAU": {
                "description": "Provides details for creating or updating tax information for Australia",
                "properties": {
                    "tfn": {
                        "description": "Tax File Number",
                        "example": "633098123",
                        "maxLength": 64,
                        "nullable": true,
                        "type": "string"
                    },
                    "exemptType": {
                        "$ref": "#/components/schemas/ExemptTypes"
                    },
                    "employmentBasis": {
                        "$ref": "#/components/schemas/EmploymentBasis"
                    },
                    "residencyStatus": {
                        "$ref": "#/components/schemas/ResidencyStatuses"
                    },
                    "taxFreeThresholdClaimed": {
                        "description": "Tax Free Threshold Claimed",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "tradeLoanSupport": {
                        "description": "Trade Loan Support",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "hecsSupported": {
                        "description": "Hecs Supported",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "studentStartupLoan": {
                        "description": "Student Startup Loan",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "financialSupplementDebt": {
                        "description": "Financial Supplement Debt",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "australianResidentForTaxPurposes": {
                        "description": "Australian Resident for Tax Purposes",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "eligibleToReceiveLeaveLoading": {
                        "description": "Eligible To Receive Leave Loading",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "otherTaxOffsetClaimed": {
                        "description": "Other Tax Offset Claimed",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "offsetEstimatedAmountInCents": {
                        "description": "Other Tax Offset Claimed (in Cents)",
                        "example": 12345,
                        "nullable": true,
                        "type": "integer"
                    },
                    "upwardVariationRequested": {
                        "description": "Upward Variation Requested",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "increasedTaxWithholdingAmountInCents": {
                        "description": "Increased Tax Withholding Amount",
                        "example": 12345,
                        "nullable": true,
                        "type": "integer"
                    },
                    "hasApprovedWithholdingVariation": {
                        "description": "Has Approved Withholding Variation",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "approvedWithholdingVariationPercentage": {
                        "description": "Approved Withholding Variation Percentage",
                        "example": "18.5",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RecordTaxDetailsInputNZ": {
                "description": "Provides details for creating or updating tax information for New Zealand\n\nThe Student Loan Percentage (`studentLoanPercentage`) is mandatory if Tax Code (`taxCode`) has suffix SL.\n\nIRD Number (`irdNumber`) is mandatory for all Tax codes other than ND. Value must be either 8 or 9 digits.\nIf the provided number is 8 digit, then zero will be prefixed while saving the tax-details.\n",
                "properties": {
                    "taxCode": {
                        "$ref": "#/components/schemas/TaxCode"
                    },
                    "studentLoanPercentage": {
                        "description": "Student Loan Percentage",
                        "example": "7.0",
                        "nullable": true,
                        "type": "string"
                    },
                    "irdNumber": {
                        "description": "IRD Number",
                        "example": "875630954",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "taxCode"
                ],
                "type": "object"
            },
            "EmploymentTypesPage": {
                "description": "A wrapper for the Employment Type which includes pagination information and an array of Employment Types",
                "properties": {
                    "pageInfo": {
                        "$ref": "#/components/schemas/PageInfo"
                    },
                    "data": {
                        "description": "An array of Employment Type Summaries",
                        "items": {
                            "$ref": "#/components/schemas/EmploymentTypesPage_data"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "EmploymentTypeSummary": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/EmploymentTypeReference"
                    },
                    {
                        "$ref": "#/components/schemas/EmploymentTypeSummary_allOf"
                    }
                ],
                "description": "Summary information for the employment type",
                "type": "object"
            },
            "EmploymentTypeReference": {
                "description": "Reference information for the Employment Type containing id, name",
                "properties": {
                    "id": {
                        "description": "The identifier for the Employment Type",
                        "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                        "type": "string"
                    },
                    "name": {
                        "$ref": "#/components/schemas/EmploymentTypes"
                    }
                },
                "type": "object"
            },
            "EmploymentTypes": {
                "description": "A list of all Employment Types in an account.",
                "enum": [
                    "Unspecified",
                    "Permanent_FullTime",
                    "Permanent_PartTime",
                    "Temporary",
                    "Casual",
                    "Contract",
                    "FixedTerm_FullTime",
                    "FixedTerm_PartTime",
                    "LabourHire",
                    "SuperIncomeStream"
                ],
                "example": "Casual",
                "type": "string"
            },
            "EmploymentStatusesPage": {
                "description": "A wrapper for the Employment Status which includes pagination information and an array of Employment Statuses",
                "properties": {
                    "pageInfo": {
                        "$ref": "#/components/schemas/PageInfo"
                    },
                    "data": {
                        "description": "An array of Employment Statuses",
                        "items": {
                            "$ref": "#/components/schemas/EmploymentStatusesPage_data"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "EmploymentStatusSummary": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/EmploymentStatusReference"
                    },
                    {
                        "$ref": "#/components/schemas/EmploymentStatusSummary_allOf"
                    }
                ],
                "description": "Summary information for the employment status",
                "type": "object"
            },
            "EmploymentStatusReference": {
                "description": "Reference information for the Employment Status containing id, name",
                "properties": {
                    "id": {
                        "description": "The identifier for the Employment Status",
                        "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                        "type": "string"
                    },
                    "name": {
                        "$ref": "#/components/schemas/EmploymentStatuses"
                    }
                },
                "type": "object"
            },
            "EmploymentStatuses": {
                "description": "A list of all Employment Statuses in an account.",
                "enum": [
                    "Current",
                    "Terminated",
                    "Completed",
                    "Suspended",
                    "Leave",
                    "LeaveWithoutPay",
                    "Transferred",
                    "Terminating",
                    "Merged"
                ],
                "example": "Transferred",
                "type": "string"
            },
            "GendersPage": {
                "description": "A wrapper for the Gender which includes pagination information and an array of Genders",
                "properties": {
                    "pageInfo": {
                        "$ref": "#/components/schemas/PageInfo"
                    },
                    "data": {
                        "description": "An array of Gender summaries",
                        "items": {
                            "$ref": "#/components/schemas/GendersPage_data"
                        },
                        "type": "array"
                    }
                }
            },
            "GenderSummary": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GenderReference"
                    },
                    {
                        "$ref": "#/components/schemas/GenderSummary_allOf"
                    }
                ],
                "description": "Summary information for the gender",
                "type": "object"
            },
            "GenderReference": {
                "description": "Reference information for the Gender containing id, key, name",
                "properties": {
                    "id": {
                        "description": "The identifier for the Gender",
                        "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                        "type": "string"
                    },
                    "key": {
                        "description": "A fixed value used to refer to the Gender.  Will not change in the system",
                        "example": "Non_Binary",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name for this particular gender.  Can be changed in the system.",
                        "example": "Non Binary",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "HonorificsPage": {
                "description": "A wrapper for the Honorifics which includes pagination information and an array of Honorifics",
                "properties": {
                    "pageInfo": {
                        "$ref": "#/components/schemas/PageInfo"
                    },
                    "data": {
                        "description": "An array of Honorific summaries",
                        "items": {
                            "$ref": "#/components/schemas/HonorificsPage_data"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "HonorificSummary": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/HonorificReference"
                    },
                    {
                        "$ref": "#/components/schemas/HonorificSummary_allOf"
                    }
                ],
                "description": "Summary information for the honorific",
                "type": "object"
            },
            "HonorificReference": {
                "description": "Reference information for the Honorific containing id, name",
                "properties": {
                    "id": {
                        "description": "Unique identifier of each honorific",
                        "example": "4eb62cb48c9f429c93bc26664c1a5a4d",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the honorific.",
                        "example": "Mr",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PageInfo": {
                "properties": {
                    "hasPreviousPage": {
                        "description": "A boolean value set to true if there are items in a previous page.\n\n**Note:** For usage in a future release.\n",
                        "example": true,
                        "type": "boolean"
                    },
                    "hasNextPage": {
                        "description": "A boolean value set to true if there are items in a following page.\n\n**Note:** For usage in a future release.\n",
                        "example": true,
                        "type": "boolean"
                    },
                    "endCursor": {
                        "$ref": "#/components/schemas/Cursor"
                    },
                    "startCursor": {
                        "$ref": "#/components/schemas/Cursor"
                    }
                },
                "type": "object"
            },
            "Cursor": {
                "description": "An opaque identifier used to paginate.\nProvide this to get elements before or after this element.\n\n**Note**: For usage in a future release\n",
                "example": "asdfgflkj",
                "type": "string"
            },
            "RetrieveLink": {
                "description": "A URI of the entity. This includes the account id and the entity id.",
                "example": "/accounts/87ujhygt5mnbgtsiw7jdhdff60/employees/4eb62cb48c9f429c93bc26664c1a12345",
                "type": "string"
            },
            "AddressDetail": {
                "description": "Summary information for the address",
                "properties": {
                    "line1": {
                        "description": "Address Line 1",
                        "example": "Suite 3",
                        "maxLength": 128,
                        "type": "string"
                    },
                    "line2": {
                        "description": "Address Line 2",
                        "example": "1234 Pacific Highway",
                        "maxLength": 128,
                        "type": "string"
                    },
                    "suburb": {
                        "description": "Suburb, Town or City",
                        "example": "Sydney Town",
                        "maxLength": 128,
                        "type": "string"
                    },
                    "state": {
                        "description": "Australian State, Territory, NZ Province",
                        "example": "NSW",
                        "maxLength": 128,
                        "type": "string"
                    },
                    "postcode": {
                        "description": "Australian or NZ postcode",
                        "example": "2002",
                        "maxLength": 128,
                        "type": "string"
                    },
                    "country": {
                        "description": "Australia, New Zealand.",
                        "example": "Australia",
                        "maxLength": 128,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ContactDetail": {
                "description": "Summary information for the contact",
                "properties": {
                    "phone": {
                        "description": "Land line number may include the area code",
                        "example": "08 4044 0404",
                        "maxLength": 128,
                        "nullable": true,
                        "type": "string"
                    },
                    "mobile": {
                        "description": "Mobile phone number",
                        "example": "0404 404 040",
                        "maxLength": 128,
                        "nullable": true,
                        "type": "string"
                    },
                    "website": {
                        "description": "The URL for the website of this contact",
                        "example": "www.test.com",
                        "maxLength": 128,
                        "nullable": true,
                        "type": "string"
                    },
                    "fax": {
                        "description": "Fax number for the contact may include area code",
                        "example": "(02) 2020 2020",
                        "maxLength": 128,
                        "nullable": true,
                        "type": "string"
                    },
                    "email": {
                        "description": "Email address for the contact",
                        "example": "test@test.com",
                        "maxLength": 128,
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Genders": {
                "description": "A list of all Genders in an account.",
                "enum": [
                    "Male",
                    "Female",
                    "Non_Binary",
                    "Not_Stated"
                ],
                "example": "Male",
                "type": "string"
            },
            "RecordContactDetail": {
                "description": "Contact Details",
                "properties": {
                    "home": {
                        "$ref": "#/components/schemas/HomeContactDetail"
                    },
                    "work": {
                        "$ref": "#/components/schemas/WorkContactDetail"
                    }
                },
                "type": "object"
            },
            "HomeContactDetail": {
                "description": "Home Contact details",
                "properties": {
                    "phone": {
                        "description": "Land line number may include the area code",
                        "example": "08 4044 0404",
                        "maxLength": 128,
                        "nullable": true,
                        "type": "string"
                    },
                    "mobile": {
                        "description": "Mobile phone number",
                        "example": "0404 404 040",
                        "maxLength": 128,
                        "nullable": true,
                        "type": "string"
                    },
                    "email": {
                        "description": "Email address for the contact",
                        "example": "test@test.com",
                        "maxLength": 128,
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "WorkContactDetail": {
                "description": "Work Contact details",
                "properties": {
                    "email": {
                        "description": "Email address for the contact",
                        "example": "test@test.com",
                        "maxLength": 128,
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CandidateStatuses": {
                "description": "A list of all Candidate Statuses in an account.",
                "enum": [
                    "Current",
                    "NotCurrent"
                ],
                "example": "Current",
                "type": "string"
            },
            "BranchesPage_data": {
                "properties": {
                    "cursor": {
                        "$ref": "#/components/schemas/Cursor"
                    },
                    "retrieveLink": {
                        "$ref": "#/components/schemas/RetrieveLink"
                    },
                    "node": {
                        "$ref": "#/components/schemas/BranchSummary"
                    }
                },
                "type": "object"
            },
            "BranchSummary_allOf": {
                "properties": {
                    "type": {
                        "description": "The type of branch setup in the account",
                        "enum": [
                            "LegalEntity",
                            "Department"
                        ],
                        "example": "LegalEntity",
                        "nullable": true,
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/components/schemas/AddressDetail"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the branch was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "“2019-01-08T11:09:45”",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the branch was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "“2019-01-08T11:09:45”",
                        "type": "string"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/BranchReference"
                    },
                    "children": {
                        "description": "An array of children branch. Each child branch contains an branch ID, name and path.",
                        "items": {
                            "$ref": "#/components/schemas/BranchReference"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "BranchDetail_allOf": {
                "properties": {
                    "type": {
                        "description": "The type of branch setup in the account",
                        "enum": [
                            "LegalEntity",
                            "Department"
                        ],
                        "example": "LegalEntity",
                        "nullable": true,
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/components/schemas/AddressDetail"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the branch was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "“2019-01-08T11:09:45”",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the branch was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "“2019-01-08T11:09:45”",
                        "type": "string"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/BranchReference"
                    },
                    "children": {
                        "description": "An array of children branch. Each child branch contains an branch ID, name and path.",
                        "items": {
                            "$ref": "#/components/schemas/BranchReference"
                        },
                        "type": "array"
                    },
                    "legalName": {
                        "description": "The legal name for the branch provided when the branch was created in the system\n",
                        "example": "Jo's Industries Pty Ltd",
                        "type": "string"
                    },
                    "tradingName": {
                        "description": "The name under which the branch is operating",
                        "example": "Jo's Plumbers North Sydney",
                        "type": "string"
                    },
                    "businessNumber": {
                        "description": "This is the Australian Business Number for the branch.  NZ ??",
                        "example": "123 456 789 01",
                        "type": "string"
                    },
                    "testingBranch": {
                        "description": "A boolean value of TRUE or FALSE if the branch is created for testing purposes only\n",
                        "type": "boolean"
                    },
                    "branchNameWHSPortal": {
                        "description": "By default, the WHS portal will show the full branch name {path} unless a different branch name is specified in this field.\n",
                        "example": "SM WHS Portal",
                        "type": "string"
                    },
                    "branchNameApplicantPortal": {
                        "description": "By default, the applicant portal will show the full branch name {path} unless a different branch name is specified in this field.\n",
                        "example": "SM Candidate Portal",
                        "type": "string"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/ContactDetail"
                    }
                },
                "type": "object"
            },
            "CandidatesPage_data": {
                "properties": {
                    "cursor": {
                        "$ref": "#/components/schemas/Cursor"
                    },
                    "retrieveLink": {
                        "$ref": "#/components/schemas/RetrieveLink"
                    },
                    "node": {
                        "$ref": "#/components/schemas/CandidateSummary"
                    }
                },
                "type": "object"
            },
            "CandidateSummary_allOf": {
                "properties": {
                    "firstName": {
                        "description": "First name of the candidate",
                        "example": "Michael",
                        "maxLength": 128,
                        "nullable": false,
                        "type": "string"
                    },
                    "surname": {
                        "description": "Surname or last name of the candidate",
                        "example": "Johnson",
                        "maxLength": 255,
                        "nullable": false,
                        "type": "string"
                    },
                    "dateOfBirth": {
                        "description": "Birthdate of the candidate (accepted format is YYYY-MM-DD)",
                        "example": "1974-05-21",
                        "maxLength": 10,
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                        "type": "string"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/Genders"
                    },
                    "positionTitle": {
                        "description": "Position Title of the candidate",
                        "example": "Johnson",
                        "maxLength": 255,
                        "nullable": false,
                        "type": "string"
                    },
                    "weekDaysInSystem": {
                        "description": "Week Days in System",
                        "example": 2.5,
                        "type": "number"
                    },
                    "candidateStatus": {
                        "description": "status of the Candidate",
                        "example": "Current",
                        "type": "string"
                    },
                    "ownerBranch": {
                        "$ref": "#/components/schemas/BranchReference"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the candidate record was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the candidate record was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CandidateDetail_allOf": {
                "properties": {
                    "firstName": {
                        "description": "First name of the candidate",
                        "example": "Michael",
                        "maxLength": 128,
                        "nullable": false,
                        "type": "string"
                    },
                    "surname": {
                        "description": "Surname or last name of the candidate",
                        "example": "Johnson",
                        "maxLength": 255,
                        "nullable": false,
                        "type": "string"
                    },
                    "dateOfBirth": {
                        "description": "Birthdate of the candidate (accepted format is YYYY-MM-DD)",
                        "example": "1974-05-21",
                        "maxLength": 10,
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                        "type": "string"
                    },
                    "linkedPosition": {
                        "description": "Linked Position for the candidate",
                        "example": "Senior Accountant",
                        "maxLength": 255,
                        "nullable": false,
                        "type": "string"
                    },
                    "weekDaysInSystem": {
                        "description": "Week Days in System",
                        "example": 2.5,
                        "type": "number"
                    },
                    "candidateStatus": {
                        "description": "status of the Candidate",
                        "example": "Current",
                        "type": "string"
                    },
                    "ownerBranch": {
                        "$ref": "#/components/schemas/BranchReference"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the candidate record was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the candidate record was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "title": {
                        "description": "Title of an candidate. From honorifics list",
                        "example": "Mr",
                        "maxLength": 128,
                        "type": "string"
                    },
                    "middleName": {
                        "description": "Middle name of the candidate",
                        "example": "K",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "preferredName": {
                        "description": "Preferred name of the candidate",
                        "example": "Mike",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "nickname": {
                        "description": "Nick name of the candidate",
                        "example": "Mickey",
                        "maxLength": 128,
                        "type": "string"
                    },
                    "personalAddress": {
                        "$ref": "#/components/schemas/AddressDetail"
                    },
                    "postalAddress": {
                        "$ref": "#/components/schemas/AddressDetail"
                    },
                    "contacts": {
                        "$ref": "#/components/schemas/RecordContactDetail"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/Genders"
                    },
                    "positionTitle": {
                        "description": "The title of the position associated to the candidate (Manager, CTO, CEO)",
                        "example": "Manager",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "proposedCommencementDate": {
                        "description": "Proposed Start date of the employment (accepted format is YYYY-MM-DD)",
                        "example": "2020-07-01",
                        "maxLength": 10,
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                        "type": "string"
                    },
                    "createdBy": {
                        "description": "The username who created the candidate",
                        "example": "d.lillard@ptblazers.com",
                        "maxLength": 128,
                        "type": "string"
                    },
                    "newCandidateId": {
                        "description": "When a candidate is transferred they are given a new candidate id. This field contains value only when an candidate is transferred.",
                        "example": "3436f492c93bc25a4d2cb48c96664c1a",
                        "type": "string"
                    },
                    "oldCandidateId": {
                        "description": "This is the candidateId of a candidate prior to his transfer. This field contains value only if the candidate has been transferred.",
                        "example": "54393bc26664c1a5a4d62cb48c9f492c",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EmployeesPage_data": {
                "properties": {
                    "cursor": {
                        "$ref": "#/components/schemas/Cursor"
                    },
                    "retrieveLink": {
                        "$ref": "#/components/schemas/RetrieveLink"
                    },
                    "node": {
                        "$ref": "#/components/schemas/EmployeeSummary"
                    }
                },
                "type": "object"
            },
            "EmployeeSummary_allOf": {
                "properties": {
                    "firstName": {
                        "description": "First name of the employee",
                        "example": "Michael",
                        "maxLength": 128,
                        "nullable": false,
                        "type": "string"
                    },
                    "surname": {
                        "description": "Surname or last name of the employee",
                        "example": "Johnson",
                        "maxLength": 255,
                        "nullable": false,
                        "type": "string"
                    },
                    "dateOfBirth": {
                        "description": "Birthdate of the employees (accepted format is YYYY-MM-DD)",
                        "example": "1974-05-21",
                        "maxLength": 10,
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                        "type": "string"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/Genders"
                    },
                    "employmentType": {
                        "$ref": "#/components/schemas/EmploymentTypes"
                    },
                    "ownerBranch": {
                        "$ref": "#/components/schemas/BranchReference"
                    },
                    "employmentStatus": {
                        "$ref": "#/components/schemas/EmploymentStatuses"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the employee record was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the employee record was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EmployeeDetail_allOf": {
                "properties": {
                    "firstName": {
                        "description": "First name of the employee",
                        "example": "Michael",
                        "maxLength": 128,
                        "nullable": false,
                        "type": "string"
                    },
                    "surname": {
                        "description": "Surname or last name of the employee",
                        "example": "Johnson",
                        "maxLength": 255,
                        "nullable": false,
                        "type": "string"
                    },
                    "dateOfBirth": {
                        "description": "Birthdate of the employees (accepted format is YYYY-MM-DD)",
                        "example": "1974-05-21",
                        "maxLength": 10,
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                        "type": "string"
                    },
                    "employmentType": {
                        "$ref": "#/components/schemas/EmploymentTypes"
                    },
                    "ownerBranch": {
                        "$ref": "#/components/schemas/BranchReference"
                    },
                    "employmentStatus": {
                        "$ref": "#/components/schemas/EmploymentStatuses"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the employee record was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the employee record was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "title": {
                        "description": "Title of an employee. From honorifics list",
                        "example": "Mr",
                        "maxLength": 128,
                        "type": "string"
                    },
                    "middleName": {
                        "description": "Middle name of the employee",
                        "example": "K",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "preferredName": {
                        "description": "Preferred name of the employee",
                        "example": "Mike",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "nickname": {
                        "description": "Nick name of the employee",
                        "example": "Mickey",
                        "maxLength": 128,
                        "type": "string"
                    },
                    "personalAddress": {
                        "$ref": "#/components/schemas/AddressDetail"
                    },
                    "postalAddress": {
                        "$ref": "#/components/schemas/AddressDetail"
                    },
                    "contacts": {
                        "$ref": "#/components/schemas/RecordContactDetail"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/Genders"
                    },
                    "positionTitle": {
                        "description": "The title of the position associated to the employee (Manager, CTO, CEO)",
                        "example": "Manager",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "commencementDate": {
                        "description": "Start date of the employment (accepted format is YYYY-MM-DD)",
                        "example": "2020-07-01",
                        "maxLength": 10,
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                        "type": "string"
                    },
                    "endDate": {
                        "description": "Termination date of the employee if the employee status is Terminating or Terminated (accepted format is YYYY-MM-DD)",
                        "example": "2017-12-25",
                        "type": "string"
                    },
                    "linkedBranches": {
                        "description": "Name of the branches that the employee is linked other than ownerBranch. Includes ID, name and path of the branch.",
                        "items": {
                            "$ref": "#/components/schemas/BranchReference"
                        },
                        "type": "array"
                    },
                    "newEmployeeId": {
                        "description": "When an employee is transferred they are given a new employee id. This field is only returned when an employee is transferred.",
                        "example": "asdfgfqwerty",
                        "type": "string"
                    },
                    "oldEmployeeId": {
                        "description": "This is the employeeId of an employee prior to his transfer. This field is returned only if the employee has been transferred.",
                        "example": "lkjhjlkjhl",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EmploymentTypesPage_data": {
                "properties": {
                    "cursor": {
                        "$ref": "#/components/schemas/Cursor"
                    },
                    "node": {
                        "$ref": "#/components/schemas/EmploymentTypeSummary"
                    }
                },
                "type": "object"
            },
            "EmploymentTypeSummary_allOf": {
                "properties": {
                    "description": {
                        "description": "Description of the employment type",
                        "example": "Permanent (Full Time)",
                        "type": "string"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the employment type was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the employment type was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EmploymentStatusesPage_data": {
                "properties": {
                    "cursor": {
                        "$ref": "#/components/schemas/Cursor"
                    },
                    "node": {
                        "$ref": "#/components/schemas/EmploymentStatusSummary"
                    }
                },
                "type": "object"
            },
            "EmploymentStatusSummary_allOf": {
                "properties": {
                    "description": {
                        "description": "Description for the Employment Status",
                        "example": "Current",
                        "type": "string"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the employment status was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the employment type was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GendersPage_data": {
                "properties": {
                    "cursor": {
                        "$ref": "#/components/schemas/Cursor"
                    },
                    "node": {
                        "$ref": "#/components/schemas/GenderSummary"
                    }
                },
                "type": "object"
            },
            "GenderSummary_allOf": {
                "properties": {
                    "description": {
                        "description": "Details of Gender",
                        "example": "A male person",
                        "type": "string"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the gender was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the gender was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "HonorificsPage_data": {
                "properties": {
                    "cursor": {
                        "$ref": "#/components/schemas/Cursor"
                    },
                    "node": {
                        "$ref": "#/components/schemas/HonorificSummary"
                    }
                },
                "type": "object"
            },
            "HonorificSummary_allOf": {
                "properties": {
                    "description": {
                        "description": "Description of the honorific",
                        "example": "Mr",
                        "type": "string"
                    },
                    "dateCreatedUTC": {
                        "description": "UTC time of when the honorific was created. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    },
                    "dateUpdatedUTC": {
                        "description": "UTC time of when the honorific was updated. (format is YYYY-MM-DD HH:MM:SS)",
                        "example": "1997-07-16T19:20:30.45+01:00",
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "OAuth2": {
                "flows": {
                    "authorizationCode": {
                        "authorizationUrl": "https://login.enablehr.com/oauth/authorize",
                        "refreshUrl": "https://login.enablehr.com/oauth/token",
                        "scopes": {
                            "read:accounts:referencedata": "Grant read access to reference data (branches, genders, honorifics, employment types and employment statuses)",
                            "manage:accounts:referencedata": "Grant create and update access to reference data (branches, genders, honorifics, employment types and employment statuses)",
                            "read:employees": "Grant read access to employees",
                            "manage:employees": "Grant create and update access to employees"
                        },
                        "tokenUrl": "https://login.enablehr.com/oauth/token"
                    }
                },
                "type": "oauth2"
            }
        }
    }
}